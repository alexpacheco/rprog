gather(Session, Count, Linux:`Data Visualization`) %>%
mutate(Semester="Spring 2018",ID=6) -> Spring2018
f17 %>% select(Name,Department,Status,LURC:LaTeX) %>%
gather(Session, Count, LURC:LaTeX) %>%
mutate(Semester="Fall 2017",ID=5) -> Fall2017
s17 %>%
select(Name,Department,Status,LURC:LaTeX) %>%
gather(Session, Count, LURC:LaTeX) %>%
mutate(Semester="Spring 2017",ID=4) -> Spring2017
f16 %>%
select(Name,Department,Status,`Linux Intro`:Python) %>%
gather(Session, Count, `Linux Intro`:Python) %>%
mutate(Semester="Fall 2016",ID=3) -> Fall2016
f15 %>%
select(Name,Department,Status,Storage:R) %>%
gather(Session, Count, Storage:R) %>%
mutate(Semester="Fall 2015",ID=2) -> Fall2015
s15 %>%
select(Name,Department,Status,LURC:MATLAB) %>%
gather(Session, Count, LURC:MATLAB) %>%
mutate(Semester="Spring 2015",ID=1) -> Spring2015
usage <- gs_title("Training Attendance")
s18 <- usage %>% gs_read("Spring 2018",range = "A6:J24",col_types = cols(), progress = F)
f17 <- usage %>% gs_read("Fall 2017",range = "A6:K15",col_types = cols())
s17 <- usage %>% gs_read("Spring 2017",range = "A6:M32",col_types = cols())
f16 <- usage %>% gs_read("Fall 2016",range = "A6:O57",col_types = cols())
f15 <- usage %>% gs_read("Fall 2015",range = "A6:L58",col_types = cols())
s15 <- usage %>% gs_read("Spring 2015",range = "A6:K58",col_types = cols())
s18[is.na(s18)] <- 0
f17[is.na(f17)] <- 0
s17[is.na(s17)] <- 0
f16[is.na(f16)] <- 0
f15[is.na(f15)] <- 0
s15[is.na(s15)] <- 0
s18 %>% select(Name,Department,Status,Linux:`Data Visualization`) %>%
gather(Session, Count, Linux:`Data Visualization`) %>%
mutate(Semester="Spring 2018",ID=6) -> Spring2018
f17 %>% select(Name,Department,Status,LURC:LaTeX) %>%
gather(Session, Count, LURC:LaTeX) %>%
mutate(Semester="Fall 2017",ID=5) -> Fall2017
s17 %>%
select(Name,Department,Status,LURC:LaTeX) %>%
gather(Session, Count, LURC:LaTeX) %>%
mutate(Semester="Spring 2017",ID=4) -> Spring2017
f16 %>%
select(Name,Department,Status,`Linux Intro`:Python) %>%
gather(Session, Count, `Linux Intro`:Python) %>%
mutate(Semester="Fall 2016",ID=3) -> Fall2016
f15 %>%
select(Name,Department,Status,Storage:R) %>%
gather(Session, Count, Storage:R) %>%
mutate(Semester="Fall 2015",ID=2) -> Fall2015
s15 %>%
select(Name,Department,Status,LURC:MATLAB) %>%
gather(Session, Count, LURC:MATLAB) %>%
mutate(Semester="Spring 2015",ID=1) -> Spring2015
Attendance <- bind_rows(Spring2018,Fall2017,Spring2017,Fall2016,Fall2015,Spring2015)
Attendance
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count))
Attendance %>% filter(Count>0) %>% group_by(Semester) %>% summarize(Total=sum(Count))
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count)) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count),Session) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Attendees=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Attendees=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Attendees=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) %>% select(-ID)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name)))
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Count=sum(Unique))
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Count=sum(Unique)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Unique=sum(Unique)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Attendees=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) -> Attendees_Total
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Count=sum(Unique)) %>% arrange(ID) -> Attendees_Unique
Attendees_Total
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Total=sum(Count),Session=sum(n_distinct(Session))) %>% arrange(ID) -> Attendees_Total
Attendees_Total
Attendees_Unique
full_join(Attendees_Total,Attendees_Unique)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Session=sum(n_distinct(Session)),Attendees=sum(Count)) %>% arrange(ID) -> Attendees_Total
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Count=sum(Unique)) %>% arrange(ID) -> Attendees_Unique
full_join(Attendees_Total,Attendees_Unique)
Attendance %>% filter(Count>0) %>% group_by(Name,Semester,ID) %>% summarize(Unique=sum(n_distinct(Name))) %>% group_by(Semester,ID) %>% summarize(Unique=sum(Unique)) %>% arrange(ID) -> Attendees_Unique
full_join(Attendees_Total,Attendees_Unique)
Attendance
Attendance %>% filter(Count>0) %>% group_by(Department,Semester,ID) %>% summarize(Unique=sum(n_distinct(Department))) %>% group_by(Semester,ID) %>% summarize(Unique=sum(Unique)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Department,Semester,ID) %>% summarize(Unique=sum(n_distinct(Department))) %>% group_by(Semester,ID) %>% summarize(Unique=sum(Unique)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Department,Semester,ID) %>% summarize(Unique=sum(n_distinct(Department))) %>% group_by(Semester,ID) %>% summarize(Department=sum(Unique)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=sum(Department)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=sum(n(Department)) %>% arrange(ID)
)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=sum(n(Department))) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=count(Department) %>% arrange(ID)
)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=count(Department)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID,Department) %>% summarize(Department=count(Department)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=count(Department)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% summarize(Department=tally(Department)) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% tally(Department) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% count(Department) %>% arrange(ID)
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% count(Department) %>% summarize(Total=sum(n))
Attendance %>% filter(Count>0) %>% group_by(Semester,ID) %>% count(Department) %>% summarize(Department=sum(n))
Attendance %>% filter(Count>0) %>% group_by(Department,Semester,ID) %>% summarize(Unique=sum(n_distinct(Department))) %>% group_by(Semester,ID) %>% summarize(Department=sum(Unique)) %>% arrange(ID) -> Department_Unique
full_join(Attendees_Total,Department_Unique) %>% select(-ID)
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())  -> Spring2018Status
Spring2018Status
Spring2018 %>%
filter(Count > 0) %>%
group_by(Name,Status,Department) %>%
summarize(Total=n_distinct(Name)) %>%
select(Status,Total) %>%
group_by(Status) %>%
summarize(Unique=n()) -> Spring2018StatusUnique
Spring2018StatusUnique
full_join(Spring2018Status,Spring2018StatusUnique,by="Status") %>%
summarise_if(is.numeric,sum)
full_join(Spring2018Status,Spring2018StatusUnique,by="Status")
Spring2018 %>%
filter(Count > 0) %>%
group_by(Name,Status,Department) %>%
summarize(Total=n_distinct(Name)) %>%
select(Status,Total) %>%
group_by(Status) %>%
summarize(Unique=n())
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status) %>%
summarize(Total=n())
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department)
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())  %>% group_by(Status) %>% summarize(Count=sum(Total))
Spring2018
Spring2018 %>% group_by(Status)
Spring2018 %>% group_by(Status) %>% summarize(Count=sum(Count))
Spring2018Status
Spring2018 %>%
filter(Count > 0) %>%
group_by(Status,Department) %>%
summarize(Total=n())
Spring2018 %>% group_by(Status) %>% summarize(Count=sum(Count))
Spring2018
Spring2018 %>% group_by(Session)
Spring2018 %>% group_by(Session,Status) %>% summarize(Attendees=sum(Count))
Spring2018 %>% group_by(Session,Status) %>% summarize(Attendees=sum(Count)) %>% spread(Status,Attendees)
Spring2018 %>% group_by(Session,Department) %>% summarize(Attendees=sum(Count))
Spring2018 %>% group_by(Session,Department) %>% summarize(Attendees=sum(Count)) %>% spread(Department,Attendees)
shiny::runApp('ShinyApps')
runApp('shiny/sol')
runApp('shiny/sol')
runApp('shiny/sol')
suppressMessages(library(tidyverse))
library(googlesheets)
library(knitr)
library(plotly)
library(DT)
usage <- gs_title("Training Attendance")
s18 <- usage %>% gs_read("Spring 2018",range = "A6:J24",col_types = cols(), progress = F)
s18[is.na(s18)] <- 0
s18 %>% select(Name,Department,Status,Linux:`Data Visualization`) %>%
gather(Session, Count, Linux:`Data Visualization`) %>%
mutate(Semester="Spring 2018",ID=6) -> Spring2018
Spring2018
Attendance <- Spring2018
Attendance %>%
group_by(Semester,ID) %>%
summarize(Sessions=sum(n_distinct(Session)),Attendees=sum(Count)) %>%
arrange(ID)
Attendance %>%
filter(Count>0) %>%
group_by(Name,Semester,ID) %>%
summarize(Unique=sum(n_distinct(Name))) %>%
group_by(Semester,ID) %>%
summarize(Unique=sum(Unique)) %>%
arrange(ID)
Attendance %>%
group_by(Semester,ID) %>%
summarize(Sessions=sum(n_distinct(Session)),Attendees=sum(Count)) %>%
arrange(ID) -> Attendees_Total
Attendance %>%
filter(Count>0) %>%
group_by(Name,Semester,ID) %>%
summarize(Unique=sum(n_distinct(Name))) %>%
group_by(Semester,ID) %>%
summarize(Unique=sum(Unique)) %>%
arrange(ID) -> Attendees_Unique
full_join(Attendees_Total,Attendees_Unique)
Attendance %>%
filter(Count>0) %>%
group_by(Name,Semester,ID) %>%
summarize(Unique=sum(n_distinct(Name))) %>%
group_by(Semester,ID) %>%
summarize(Unique=sum(Unique)) %>%
arrange(ID)
tibble(Semester="Spring 2016", ID=0, Unique=0)
full_join(Attendees_Total,Attendees_Unique)
tibble(Semester="Spring 2016", ID=0, Sessions=0, Attendees=0, Unique=0)
tibble(Semester="Spring 2016", ID=0, Sessions=as.integer(0), Attendees=0, Unique=0)
tibble(Semester="Spring 2016", ID=0, Sessions=as.integer(0), Attendees=0, Unique=as.integer(0))
tibble(Semester="Spring 2016", ID=0, Sessions=as.integer(0), Attendees=0, Unique=as.integer(0)) -> Spring2016
full_join(Attendees_Total,Attendees_Unique)
full_join(Attendees_Total,Attendees_Unique) %>% rbind(Spring2016)
full_join(Attendees_Total,Attendees_Unique) -> tmp
rbind(tmp,Spring 2016)
full_join(Attendees_Total,Attendees_Unique) %>% rbind(Spring2016)
full_join(Attendees_Total,Attendees_Unique) %>% rbind(Spring2016) %>% select(-ID) %>% kable()
full_join(Attendees_Total,Attendees_Unique) %>% rbind(Spring2016) %>% select(-ID)
full_join(Attendees_Total,Attendees_Unique) -> tmp
tmp
rbind(tmp,Spring2016)
typeof(tmp)
full_join(Attendees_Total,Attendees_Unique)
full_join(full_join(Attendees_Total,Attendees_Unique),Spring2016)
1+2
a=2+3
b<-10/a
a <- 3
b <- sqrt(a)
b
c <- 2i
d <- TRUE
d
as.numeric(d); as.character(b); is.complex(c)
# "#" indicates comment
# "<-" performs assignment operation (you can use "=" as well, but "<-" is preferred)
# numeric (double is the same as numeric)
d <- c(1,2,3)
# character
d <- c("1","2","3")
# you can covert at object with as.TYPE
# as. numeric changes the character vector created above to numeric
as.numeric(d)
# The conversion doesn't always work though
as.numeric("a")
x <- c(0.5, 0.6) ## numeric
x <- c(TRUE, FALSE) ## logical
x <- c(T, F) ## logical
x <- c("a", "b", "c") ## character
# The ":" operator can be used to generate integer sequences
x <- 9:29 ## integer
x <- c(1+0i, 2+4i) ## complex
x <- vector("numeric", length = 10)
# Coercion will occur when objects of different classes are mixed
y <- c(1.7, "a") ## character
y <- c(TRUE, 2) ## numeric
y <- c("a", TRUE) ## character
# Can also coerce explicitly
x <- 0:6
class(x)
as.logical(x)
x <- 1:4; y <- 6:9
x + y
x > 2
x * y
print( x[x >= 3] )
# Create a matrix using the matrix() function
m <- matrix(1:6, nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
# Pass a dim attribute to a vector
m <- 1:10
m
dim(m) <- c(2, 5)
m
# Row binding and column binding
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
# Slicing
m
# element at 2nd row, 3rd column
m[2,3]
# entire i<sup>th</sup> row of m
m[2,]
# entire j<sup>th</sup> column of m
m[,3]
# Use the list() function to construct a list
x <- list(1, "a", TRUE, 1 + 4i)
x
# Each element in a vector can have a name
x <- 1:3
names(x)
names(x) <- c("a","b","c")
names(x)
x
# Lists
x <- list(a = 1, b = 2, c = 3)
x
# Names can be used to refer to individual element
x$a
# Columns and rows of matrices
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a", "b"), c("c", "d"))
m
m <- matrix(1:10, nrow = 2, ncol = 5)
str(matrix)
str(m)
str(str)
# Use the factor() function to construct a vector of factors
# The order of levels can be set by the levels keyword
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
# Dates are stored internally as the number of days since 1970-01-01
x <- as.Date("1970-01-01")
x
as.numeric(x)
x+1
# Times are stored internally as the number of seconds since 1970-01-01
x <- Sys.time() ; x
as.numeric(x)
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
x <- c(1,2, NA, 10,3)
is.na(x)
is.nan(x)
x <- c(1,2, NaN, NA,4)
is.na(x)
is.nan(x)
# Random generation from a uniform distribution.
runif(10, 2, 4)
# You can name the arguments in the function call.
runif(10, min = 2, max = 4)
# Given p value and degree of freedom, find the t-value.
qt(p=0.975, df = 8)
# The inverse of the above function call
pt(2.306, df = 8)
newDef <- function(a,b)
{
x = runif(10,a,b)
mean(x)
}
newDef(-1,1)
x <- c("a", "b", "c", "d")
# These loops have the same effect
# Loop through the indices
for(i in 1:4) {
print(x[i])
}
# Loop using the seq_along() function
for(i in seq_along(x)) {
print(x[i])
}
# Loop through the name
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
counter <- as.integer(readline(prompt="Enter an integer: "))
factorial <- 1
while ( counter > 0)
{
factorial <-  factorial * counter
counter = counter - 1
}
print(factorial)
counter <- as.integer(readline(prompt="Enter an integer: "))
repeat
{
dble_factorial <- dble_factorial * counter
if (counter <= 2)
break
else
counter = counter - 2
}
counter <- as.integer(readline(prompt="Enter an integer: "))
dble_factorial <- 1
repeat
{
dble_factorial <- dble_factorial * counter
if (counter <= 2)
break
else
counter = counter - 2
}
print(dble_factorial)
# X: array objects
# MARGIN: a vector giving the subscripts which the function will be applied over
# FUN: a function to be applied
str(apply)
x <- matrix(rnorm(200), 20, 10)
# Row means
apply(x, 1, mean)
# Column sums
apply(x, 2, sum)
# 25th and 75th Quantiles for rows
apply(x, 1, quantile, probs = c(0.25, 0.75))
dim(x)
# Change the dimensions of x
dim(x) <- c(2,2,50)
# Take average over the first two dimensions
apply(x, c(1, 2), mean)
rowMeans(x, dims = 2)
library(tidyverse)
if ( !require('lubridate')){
install.packages('lubridate')
}
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly %>% head
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1617su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthlyusage
library(knitr)
monthly %>%
group_by(PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) -> monthlypidept
monthlypidept %>% kable
monthly %>%
group_by(Department) %>%
summarize(Serial=round(sum(as.double(Serial))),SMP=round(sum(as.double(Single))),DMP=round(sum(as.double(Multi))),Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
arrange(desc(Total)) -> monthlyuser
monthlyuser
library(xtable)
monthlyuser %>% xtable
monthly %>%
group_by(Status) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus
monthlystatus
daily %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
p + coord_flip()
p <- monthlyusage %>%
ggplot(aes(Month,Percent)) + geom_col()
p
p + labs(title="Sol Usage", y="Percent", x="Month", caption="AY 2016-17")
p <- daily %>%
group_by(Day, PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Day,Total)) + geom_line(aes(col = PIDept))
p
p + facet_wrap( ~PIDept)
p + facet_wrap( ~PIDept, scales = "free", ncol = 2) + theme(legend.position='none')
if(!require('animation')){
install.packages('animation')
}
if(!require('gganimate')){
install.packages('animation')
}
weeklyusage_status <- daily %>%
group_by(Week=floor_date(as.Date(Day), "week"),Status) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Week,Total,frame=Week,cumulative=TRUE)) + geom_line(aes(col = Status)) +
facet_wrap( ~Status, scales = "free", ncol = 2) + theme(legend.position='none')
ani.options(interval = 0.1, ani.width = 640, ani.height = 480)
gganimate(weeklyusage_status,'weeklystatus.gif')
library("slidify", lib.loc="~/anaconda3/lib/R/library")
library("slidifyLibraries", lib.loc="~/anaconda3/lib/R/library")
slidify('index.Rmd')
getwd()
setwd('/Users/apacheco/Tutorials/DCVS/bitbucket/rprog/')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
