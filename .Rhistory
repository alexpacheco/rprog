daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly %>% head
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthlyusage
library(knitr)
monthly %>%
group_by(PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) -> monthlypidept
monthlypidept %>% kable
monthly %>%
group_by(Department) %>%
summarize(Serial=round(sum(as.double(Serial))),SMP=round(sum(as.double(Single))),DMP=round(sum(as.double(Multi))),Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
arrange(desc(Total)) -> monthlyuser
monthlyuser
library(xtable)
monthlyuser %>% xtable
monthly %>%
group_by(Status) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus
monthlystatus
daily %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
p + coord_flip()
p <- monthlyusage %>%
ggplot(aes(Month,Percent)) + geom_col()
p
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
#daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
setwd('/Users/apacheco/Tutorials/DCVS/bitbucket/rprog/')
library(tidyverse)
if ( !require('lubridate')){
install.packages('lubridate')
}
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
#daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
daily %>% group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>% summarize(Serial=sum(as.double(Serial)))
daily %>% group_by(Month=floor_date(as.Date(Day), "month"))
setwd('/Users/apacheco/Tutorials/DCVS/bitbucket/rprog/')
library(tidyverse)
if ( !require('lubridate')){
install.packages('lubridate')
}
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
#daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly %>% head
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:4],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthlyusage
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
#daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly %>% head
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:4],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:6],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthlyusage
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
#daily <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily <- read_delim('soldaily1718-public.csv',delim=";")
daily %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly <- daily %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly %>% head
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:6],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthly %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:7],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage
monthlyusage
setwd('/Users/apacheco/Tutorials/DCVS/bitbucket/rprog/')
library(tidyverse)
if ( !require('lubridate')){
install.packages('lubridate')
}
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
daily1617 <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily1718 <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1718-public.csv',delim=";")
daily1617 %>% head
daily1718 %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly1617 <- daily1617 %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly1617 %>% head
monthly1617 %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1718su[1:7],Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage1617
monthly1617 %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1617su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage1617
monthlyusage1617
library(knitr)
monthly1617 %>%
group_by(PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) -> monthlypidept1617
monthlypidept1617 %>% kable
monthly1617 %>%
group_by(Department) %>%
summarize(Serial=round(sum(as.double(Serial))),SMP=round(sum(as.double(Single))),DMP=round(sum(as.double(Multi))),Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
arrange(desc(Total)) -> monthlyuser1617
monthlyuser1617
library(xtable)
monthlyuser1617 %>% xtable
monthly1617 %>%
group_by(Status) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1617
monthlystatus1617
monthly1617 %>%
group_by(trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1617
monthlystatus1617
daily1617 %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
monthly1617 %>%
group_by(Status) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1617
monthlystatus1617
daily1617 %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily1617 %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus1617 %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
monthly1617 %>%
group_by(trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1617
monthlystatus1617
daily1617 %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily1617 %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus1617 %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
monthly1617 %>%
group_by(Status=trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1617
monthlystatus1617
daily1617 %>%
filter(as.Date(Day) >= "2017-02-01" & as.Date(Day) <= "2017-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily1617 %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus1617 %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
p + coord_flip()
p <- monthlyusage1617 %>%
ggplot(aes(Month,Percent)) + geom_col()
p
p + labs(title="Sol Usage", y="Percent", x="Month", caption="AY 2016-17")
p <- daily1617 %>%
group_by(Day, PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Day,Total)) + geom_line(aes(col = PIDept))
p
p + facet_wrap( ~PIDept)
p + facet_wrap( ~PIDept, scales = "free", ncol = 2) + theme(legend.position='none')
if(!require('animation')){
install.packages('animation')
}
if(!require('gganimate')){
install.packages('animation')
}
weeklyusage_status <- daily1718 %>%
group_by(Week=floor_date(as.Date(Day), "week"),Status) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Week,Total,frame=Week,cumulative=TRUE)) + geom_line(aes(col = Status)) +
facet_wrap( ~Status, scales = "free", ncol = 2) + theme(legend.position='none')
ani.options(interval = 0.1, ani.width = 640, ani.height = 480)
gganimate(weeklyusage_status,'weeklystatus.gif')
weeklyusage_status <- daily1617 %>%
group_by(Week=floor_date(as.Date(Day), "week"),Status) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Week,Total,frame=Week,cumulative=TRUE)) + geom_line(aes(col = Status)) +
facet_wrap( ~Status, scales = "free", ncol = 2) + theme(legend.position='none')
ani.options(interval = 0.1, ani.width = 640, ani.height = 480)
gganimate(weeklyusage_status,'weeklystatus.gif')
weeklyusage_status <- daily1617 %>%
group_by(Week=floor_date(as.Date(Day), "week"),Status=trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Week,Total,frame=Week,cumulative=TRUE)) + geom_line(aes(col = Status)) +
facet_wrap( ~Status, scales = "free", ncol = 2) + theme(legend.position='none')
ani.options(interval = 0.1, ani.width = 640, ani.height = 480)
gganimate(weeklyusage_status,'weeklystatus.gif')
# read daily usage report for Sol in AY 2016-17
# usage is reported in terms of SUs used and jobs submitted for
#  serial (1 cpu), single or smp ( > 1 cpu but max of 1 node) and
#  parallel or multi node (> 1 node)  jobs
daily1617 <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1617-public.csv',delim=";")
daily1718 <- read_delim('http://webapps.lehigh.edu/hpc/training/soldaily1718-public.csv',delim=";")
daily1617 %>% head
daily1718 %>% head
# Number of core hours available per month for AY 2016-17
# Oct 1, 2016: Initial launch with 780 cpu
# Mar 15, 2017: Added 192 cpus
# May 1, 2017: Added 312 cpus
# Total Available at end of AY 2016-17: 1284 cpus
ay1617su <- c(580320.00,561600.00,580320.00,580320.00,524160.00,580320.00,699840.00,955296.00,924480.00,955296.00,955296.00,924480.00)
ay1718su <- c(955296.00,924480.00,967200.00,967200.00,873600.00,967200.00,1117440.00,  1154688.00,1117440.00,1154688.00,1155480.00,1169280.00)
monthly1718 %>% head
monthly1718 <- daily1718 %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly1718 %>% head
monthly1718 <- daily1718 %>%
group_by(Month=floor_date(as.Date(Day), "month"),Name,Department,PI,PIDept,Status) %>%
summarize(Serial=sum(as.double(Serial)), # Single core or serial SUs consumed
Single=sum(as.double(Single)), # Single node - multi core SUs consumed
Multi=sum(as.double(Multi)), # Multi node SUs consumed
Total=sum(as.double(Total)), # Total SUs consumed
SerialJ=sum(as.double(SerialJ)), # Number of Single core or serial jobs
SingleJ=sum(as.double(SingleJ)), # Number of Single node - multi core jobs
MultiJ=sum(as.double(MultiJ)), # Number Multi node jobs
TotalJ=sum(as.double(TotalJ))) # Total Number of jobs jobs
monthly1718 %>% head
monthly1718 %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1617su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage1617
monthlyusage1718
monthly1718 %>%
group_by(Month) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
mutate(Available=ay1617su,Unused=Available-Total,Percent=round(Total/Available*100,2)) -> monthlyusage1718
monthlyusage1718
library(knitr)
monthly1718 %>%
group_by(PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),
Jobs=round(sum(as.double(TotalJ)))) -> monthlypidept1718
monthlypidept1718 %>% kable
monthly1718 %>%
group_by(Department) %>%
summarize(Serial=round(sum(as.double(Serial))),SMP=round(sum(as.double(Single))),DMP=round(sum(as.double(Multi))),Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
arrange(desc(Total)) -> monthlyuser1718
monthlyuser1718
library(xtable)
monthlyuser1718 %>% xtable
monthly1718 %>%
group_by(Status=trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2)) -> monthlystatus1718
monthlystatus1718
daily1718 %>%
filter(as.Date(Day) >= "2018-02-01" & as.Date(Day) <= "2018-03-01") %>%
select(Day,Name,Department,PI,PIDept,Serial,Single,Multi) %>%
gather(JobType,Usage,Serial:Multi) %>%
filter(as.double(Usage) > 100 ) -> tmp
tmp %>% arrange(Usage) %>% head
tmp %>% arrange(Usage) %>%
spread(JobType,Usage,fill = 0.0) %>% head
daily1718 %>%
select(c(Department,Day,Total)) %>%
separate(Day,c("Year","Month","Day"),sep="-") -> tmp
head(tmp)
tmp %>%
unite(Day,c("Year","Month","Day"),sep="/") %>%
tail
p <- monthlystatus1617 %>%
ggplot(aes(x=Status,y=Total)) + geom_col()
p
p <- monthlyusage1617 %>%
ggplot(aes(Month,Percent)) + geom_col()
p
p + labs(title="Sol Usage", y="Percent", x="Month", caption="AY 2016-17")
p <- daily1718 %>%
group_by(Day, PIDept) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Day,Total)) + geom_line(aes(col = PIDept))
p
p + facet_wrap( ~PIDept)
p + facet_wrap( ~PIDept, scales = "free", ncol = 2) + theme(legend.position='none')
if(!require('animation')){
install.packages('animation')
}
if(!require('gganimate')){
install.packages('animation')
}
weeklyusage_status <- daily1718 %>%
group_by(Week=floor_date(as.Date(Day), "week"),Status=trimws(Status)) %>%
summarize(Total=round(sum(as.double(Total)),2),Jobs=round(sum(as.double(TotalJ)))) %>%
ggplot(aes(Week,Total,frame=Week,cumulative=TRUE)) + geom_line(aes(col = Status)) +
facet_wrap( ~Status, scales = "free", ncol = 2) + theme(legend.position='none')
ani.options(interval = 0.1, ani.width = 640, ani.height = 480)
gganimate(weeklyusage_status,'weeklystatus.gif')
7*36
12*36
1284+16+252+72
1624+72+432
780+192+312
780+192+312+16+252+72
780+192+312+16+252+72+72+432
9*20+25*24+8*24+13*24+16+7*36+2*36+2*36+12*36
9*20+25*24+8*24+13*24+16+7*36+2*36+2*36+12*36+24
